// Source code generated by AppGPT (www.appgpt.tech)

 //Class to create tables and seed new database
import { DataSource } from "typeorm";
import { DBConfiguration } from "./Configuration";
import { SettingsEntity } from "./db/Settings.entity";
//autogenerate imports based on resources
import { booksEntity } from "./db/books.entity";
import { authorsEntity } from "./db/authors.entity";
import { membersEntity } from "./db/members.entity";
import { loansEntity } from "./db/loans.entity";

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [SettingsEntity, booksEntity, authorsEntity, membersEntity, loansEntity];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables


    await Database.Seed();
  }
  static async Seed() {
    let data: any = {"books":[{"bookTitle":"bookTitle 1","issueDate":"2024-12-24T20:17:51.050Z","isbn":"isbn 1","genre":"genre 1","author":1,"id":41},{"bookTitle":"bookTitle 2","issueDate":"2024-02-02T12:52:06.234Z","isbn":"isbn 2","genre":"genre 2","author":2,"id":56},{"bookTitle":"bookTitle 3","issueDate":"2023-08-16T10:31:13.191Z","isbn":"isbn 3","genre":"genre 3","author":3,"id":51},{"bookTitle":"bookTitle 4","issueDate":"2023-12-06T13:13:53.794Z","isbn":"isbn 4","genre":"genre 4","author":4,"id":57},{"bookTitle":"bookTitle 5","issueDate":"2024-06-08T14:45:45.240Z","isbn":"isbn 5","genre":"genre 5","author":5,"id":64}],"authors":[{"name":"name 1","birthdate":"2024-03-01T14:49:11.853Z","nationality":"nationality 1","books":1,"id":100},{"name":"name 2","birthdate":"2023-03-23T19:06:22.895Z","nationality":"nationality 2","books":2,"id":44},{"name":"name 3","birthdate":"2023-03-23T08:29:32.911Z","nationality":"nationality 3","books":3,"id":81},{"name":"name 4","birthdate":"2023-07-12T20:44:45.838Z","nationality":"nationality 4","books":4,"id":100},{"name":"name 5","birthdate":"2024-10-15T07:37:53.891Z","nationality":"nationality 5","books":5,"id":32}],"members":[{"memberID":"memberID 1","name":"name 1","address":"address 1","phoneNumber":"phoneNumber 1","email":"email 1","joinDate":"2024-07-17T21:28:01.090Z","id":45},{"memberID":"memberID 2","name":"name 2","address":"address 2","phoneNumber":"phoneNumber 2","email":"email 2","joinDate":"2024-03-17T06:54:57.419Z","id":59},{"memberID":"memberID 3","name":"name 3","address":"address 3","phoneNumber":"phoneNumber 3","email":"email 3","joinDate":"2024-03-07T13:00:50.261Z","id":2},{"memberID":"memberID 4","name":"name 4","address":"address 4","phoneNumber":"phoneNumber 4","email":"email 4","joinDate":"2023-11-23T13:23:54.414Z","id":80},{"memberID":"memberID 5","name":"name 5","address":"address 5","phoneNumber":"phoneNumber 5","email":"email 5","joinDate":"2024-05-27T14:14:43.069Z","id":46}],"loans":[{"member":1,"loanDate":"2023-08-14T23:03:59.926Z","dueDate":"2023-06-04T08:54:04.348Z","bookID":1,"id":4},{"member":2,"loanDate":"2023-10-17T23:01:39.522Z","dueDate":"2023-06-15T02:48:35.005Z","bookID":2,"id":98},{"member":3,"loanDate":"2024-11-27T15:03:23.021Z","dueDate":"2024-12-04T12:29:31.766Z","bookID":3,"id":29},{"member":4,"loanDate":"2024-08-17T14:36:56.459Z","dueDate":"2023-09-18T21:37:44.377Z","bookID":4,"id":16},{"member":5,"loanDate":"2024-05-06T00:08:40.894Z","dueDate":"2023-04-17T18:34:04.960Z","bookID":5,"id":59}]};
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true){
      console.log('   Seeding database...');
      await this.SeedResource("booksEntity", data.books);
await this.SeedResource("authorsEntity", data.authors);
await this.SeedResource("membersEntity", data.members);
await this.SeedResource("loansEntity", data.loans); 
      await this.SeedResource("SettingsEntity", {
        settingname: "isSeeded",
        settingvalue: "true",
      });
    }else{
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository("SettingsEntity");
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: "isSeeded",
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table '+resourceName);
    await repo.upsert(resourceData, ["id"]);
  }
}

